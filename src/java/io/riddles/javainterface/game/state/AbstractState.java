/*
 * Copyright 2016 riddles.io (developers@riddles.io)
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 *     For the full copyright and license information, please view the LICENSE
 *     file that was distributed with this source code.
 */

package io.riddles.javainterface.game.state;

import java.util.ArrayList;

/**
 * io.riddles.javainterface.engine.state.AbstractState - Created on 3-6-16
 *
 * DO NOT EDIT THIS FILE
 *
 * Used to represent a state in the game. This can be serialized to output the game file,
 * or deserialized to start the game from a certain point.
 * This file stores the stuff that any game state should have. Must be extended
 * and that subclass can store additional stuff about the game state.
 *
 * @author Jim van Eeden - jim@riddles.io
 */
public abstract class AbstractState<M> {

    private AbstractState previousState;
    private AbstractState nextState;
    private int roundNumber;
    private ArrayList<M> moves;

    public AbstractState() {
        this.previousState = null;
        this.nextState = null;
        this.roundNumber = -1;
        this.moves = new ArrayList<>();
    }

    // If a single state contains multiple moves (different players move at the same time)
    public AbstractState(AbstractState previousState, ArrayList<M> moves, int roundNumber) {
        this.previousState = previousState;
        this.previousState.nextState = this;
        this.roundNumber = roundNumber;
        this.moves = moves;
    }

    // If a single state contains only one move (players move in turn)
    public AbstractState(AbstractState previousState, M move, int roundNumber) {
        this.previousState = previousState;
        this.previousState.nextState = this;
        this.roundNumber = roundNumber;

        this.moves = new ArrayList<>();
        this.moves.add(move);
    }

    /**
     * @return The state before this one
     */
    public AbstractState getPreviousState() {
        return this.previousState;
    }

    /**
     * @return The state after this one
     */
    public AbstractState getNextState() {
        return this.nextState;
    }

    /**
     * @return The round number for this state
     */
    public int getRoundNumber() {
        return this.roundNumber;
    }

    /**
     * @return The moves in this state
     */
    public ArrayList<M> getMoves() {
        return this.moves;
    }

    /**
     * @return True if there is a next state, false otherwise
     */
    public boolean hasNextState() {
        return this.nextState != null;
    }

    /**
     * @return True if there is a previous state, false otherwise
     */
    public boolean hasPreviousState() {
        return this.previousState != null;
    }

    public void setRoundNumber(int roundNumber) {
        this.roundNumber = roundNumber;
    }
}
